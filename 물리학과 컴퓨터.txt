물리학과 컴퓨터

물리학을 하는 사람들은 분야가 실험이든 이론이든 대개 컴퓨터를 잘한다. 특히 논리
적으로 프로그램을 짜는 소프트웨어 개발에 두각을 나타낸다.  advanced quantum을 쓴 
Sakurai는 60년대 정교한 논리적 프로그램을 잘 짜는 사람으로 소문이 나기도 했다. 
그러나  한때 입자물리중 이른바 beyond standard model중  string이나 
susy(supersymmetry)를 하던 젊은 학자들이 연구비나 취작 전망이 어두워지자 당시 인
기가 있었든 인공지능 분야로 많은 학자들이 전공을 바꾸는 경우도 있었다.  

물리학은 이제 실험과 이론으로만 구분할 것이 아니라 컴퓨터를 이용한 물리학도 물리
학의 한 분과로 인정받을 만큼 성장했다. 

대부분의 물리학자들이 관심갖는 소프트웨어를 잠시 회고해 본다면 50년대 60년대 이
공계 학자들은 대부분 수치계산에 속도가 빠른 Fortran을 사용하고 있었다. 당시 은
행..등 행정분야에서는 주로 Cobol이 사용되었고, 인공지능 분야로는  Lisp가 대세를 
이루었다. 

Lisp는 인공지능이나 Symbolic software를 개발하는 학자들이 특히 많이 사용하였는
데,  인공지능이라는 말에 매력을 느낀 애호가들에 의하여 많은 사랑을 받게 되었고 
지금까지도 상당한 향수와 사랑을 받고있는 언어이다. 

사실 인공지능 언어라 하여 막 인공지능이 묻어나는 그런것은 아니다.  인공지능이란 
문장을 다루는 것이기 때문에 예를 둘면, 문자열을 바꾼다 든지, 대문자 소문자를 컨
트롤 한다든지 .. 등등 이러한 문자나 문자열을 다루기 편하게 되어있으며, 그러한 함
수를  많이 만들어 놓은 패기지가 발달했다는 것이다.  그러니까 Lisp에서 인공지능이 
막 쏟아져 나오는 그런 환상을 갖지 말기 바랍니다. Fortran도 문자열을 다루는 기능
이 다 있습니다. 따라서 이 언어로도 인공지능을 할수 있습니다. 그러나 Fortran은 수
치계산 속도가 빠르므로 주로 이공계 사람들이 사용해왔으며, 특히 matrix계산이나 미
분방정식 혹은 적분을 이용한 simulation package들이 잘 발달해 있습니다.

그러나 Fortran과 Lisp의 시대는 지나갔습니다. 70년대 말 문법에러를 획기적으로 줄
인 Pascal이 등장했고 그후 80년대는 C 언어의 시대였습니다.  C 언어는 일종의 
multi-purpose(다기능) 언어로 당시까지 나온 여러 언어의 장점을 종합한 것으로 오늘
날에도 많이 사용됩니다.  80년대 말 소프트웨어의 세계에서는 이른바 OOP(Object 
oriented programming, 객체지향 프로그램)이라는 새로운 기법이 둥장하는데, 이를 두
고 어떤 학자들은 코페루니커스적 발상이라고도 말합니다.  이는 무슨 뜻이냐 하면, 
당시까지의 프로그램이란 논리에 따라 순차적으로 프로그램을 수행하는 즉 절차적 진
행을 하는 프로그램이었습니다.  그러나 예를 들어 게임을 하는 경우를 상상해보면,  
절차적으로 진행될때도 있지만,  갑자기 적이 주먹으로 친다든지 하면 급작스러이 피
해야하고,  낭떨어지가 나타난다면, 점프를 해야 하는 것입니다.  절차도 중요하지만 
시시각각 닥치는 상황 상황마다 대응하는 이른바 event 처리가 프로그램의 중요한 부
분이 되었습니다.  이러한 프로그램은 OOP라 하는 것입니다.  알고보니 이러한 프로그
램은 게임은 물론 전쟁시뮬레이션, 물리학 시뮬레이션..등 각 분야에 아주 유용한 소
프트웨어적 기술이 되었습니다.  오늘날 언어는 모두 절차적이고, 객체지향적입니다. 
C 언어도 객체지향을 받아들여 C++로 화장되었고, 90년대 들어 등장한 Java도 이러한 
언어들입니다.

오늘날 많은 연구소와 기업에서는 C++이나 Java를 많이 사용합니다. 그러나 이들 언어
는 여러가지 불편한 점이 많습니다.  이를테면 소프트웨어 개발시간이 많이 듭니다.  
이러한 단점을 개선하기 위한 언어로 등장한 것이 Basic이었습니다.  이 언어는 한줄 
한줄 명령어를 넣으면 즉각 즉각 결과를 내보냅니다. 그래서 이러한 언어를 
interactive 한 언어라 합니다. 사용자와 프로그램이 서로 대화하듯 한줄 한줄 수행하
며 어디가 잘못인지 즉각 즉각 알고 고칠수 엄청난 장점이 있습니다.  이러한 Basic을 
현대적인 언어로 확대 개편하여 등장한 이후  인기를 차지하고 있는 언어가 Python 입
니다. C++이나 Java 프로그램은 개발하는데 시간이 많이 걸리고,  인터넷 연결이나 파
일 입출력 그래프 그리기 ..등 하드웨어 관련 부분을 개발자 직접 매번 다 짜야 한다
는 는 것은 매우 피곤한 일이다. 그러나 Python 이후 등장한 R, Ruby, Julia 등은 이
러한 작업들을 한두개 명령어로 쓸수 있도록 프로그램 구조가 간편화 되어,  소프트웨
어 개발자나 과학자들은 단지 자기가 해야할 연구분야의 논리적 흐름만 다루면 되도록 
대폭 user-friendly 한 언어가 되었다.

최근의 이러한 언어들 가운데 나는 특별히 Julia를 좋아한다.  3~4년전 등장한 이 언
어 역시 interactive 언어이다.  일반적으로 interactive 언어는 실행속도가 다소 늦
다는 것이 정설인데, Julia는 C++이나 Java에 못지 않은 매우 빠른 실행속도를 자랑하
고 있다.  또한 C++이나 Python으로 작성된 패키지들을  그대로 사용할 수 있어 아주 
편리하다.  사실상 나는 Python을 많이 써왔었는데,  이 언어는 언제나 가슴 한켠 게
름직 한것이 있었다. 여러분들이 웃을지 모르겠지만, 나는 뱀을 싫어헌다.  그런데 
Python이라는 낱말 뜻이 무슨 뜻인가?  뱀중에도 비단구렁이 같은 큰 뱀 아닌가?  더
욱이 Python으로 프로그램을 사용할때 쓴 통합개발체제(IDE)의 이름은 Anaconda이다. 
이 이름은 또 무엇이란 말인가?  브라질 밀림에 산다는 거대한 뱀 아닌가?  나에게는 
이들 이름들이 항상 게름직하고 거북하였는데,  아름다운 아가씨 이름인 Julia라는 언
어가 등장하였다.  속도도 빠르고,  무료이며  interactive 한 장점까지 있으니 어찌 
사용하지 않을 수 있겠는가?  인터넷에 가서 JuliaLang 이렇게 검색하면 누구나 검색
하여 사용할수 있다.  더욱이 통합개발체제는 Atom 이라는 에디터를 사용하는데, 
Github에서 개발된 무료 에데터로 언어마다 적당히 plugin을 설치하면 누구나 편리하
게 사용할수 있다

물리학을 새로이 공부하는 많은 젊은 학자들에게 Julia와 Atom을 추천한다